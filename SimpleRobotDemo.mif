-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2884;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A05;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 1087;  -- 	STORE  DVel        ; Reset API variables
           009 : 1086;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 81ED;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 81CF;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A14;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A11;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A11;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1203;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5203;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A12;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A05;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : B820;  -- 	LOADI  32
           024 : 98B2;  -- 	OUT	   SONAREN
           025 : 0A0A;  -- 	LOAD   Five
           026 : 1087;  -- 	STORE  DVel
           027 : 08AD;  -- 	LOAD   DIST5
           028 : 6E7A;  -- 	ADDI   -2438
           029 : 302C;  -- 	JNEG   Stop
           02A : 9802;  -- 	OUT	   TIMER
           02B : 2827;  -- 	JUMP   FindLoop
           02C : 0A05;  -- 	LOAD   Zero
           02D : 1087;  -- 	STORE  DVel
           02E : B864;  -- 	LOADI 	100
           02F : 9883;  -- 	OUT 	LVELCMD
           030 : 6F38;  -- 	ADDI 	-200
           031 : 988B;  -- 	OUT 	RVELCMD
           032 : 2833;  -- 	JUMP 	CheckAngleCW
           033 : 90C2;  -- 	IN 		THETA
           034 : 6EF2;  -- 	ADDI 	-270
           035 : 40C3;  -- 	JZERO 	RESETPOS
           036 : 382E;  -- 	JPOS 	Turn90
           037 : 0A11;  -- 	LOAD	MASK1
           038 : 5212;  -- 	OR		MASK2
           039 : 98B2;  -- 	OUT		SONAREN
           03A : B931;  -- 	LOADI	305			; 305 mm = 1 ft
           03B : 98B0;  -- 	OUT		SONALARM
           03C : 90B0;  -- 	IN		SONALARM
           03D : 2211;  -- 	SUB		MASK1
           03E : 4046;  -- 	JZERO	FinMove1
           03F : 1A11;  -- 	ADD		MASK1
           040 : 2212;  -- 	SUB		MASK2
           041 : 4046;  -- 	JZERO	FinMove1
           042 : B80A;  -- 	LOADI	10
           043 : 9883;  -- 	OUT		LVELCMD
           044 : 988B;  -- 	OUT		RVELCMD
           045 : 283C;  -- 	JUMP	LoopMove1
           046 : 0A05;  -- 	LOAD   Zero
           047 : 685A;  -- 	ADDI   90
           048 : 1086;  -- 	STORE  DTheta
           049 : 8088;  -- 	CALL   ControlMovement
           04A : 9802;  -- 	OUT    TIMER
           04B : 284C;  -- 	JUMP   CircleLoop
           04C : B9FF;  -- 	LOADI  511
           04D : 9883;  -- 	OUT    LVELCMD
           04E : 6F21;  -- 	ADDI   -223
           04F : 988B;  -- 	OUT    RVELCMD
           050 : 9002;  -- 	IN     TIMER
           051 : 6FC1;  -- 	ADDI   -63
           052 : 4054;  -- 	JZERO  CircleEnd
           053 : 284C;  -- 	JUMP   CircleLoop
           054 : 0A05;  -- 	LOAD   Zero
           055 : 685A;  -- 	ADDI   90
           056 : 1086;  -- 	STORE  DTheta
           057 : 8088;  -- 	CALL   ControlMovement
           058 : 2858;  -- 	JUMP   CircleFreeze
           059 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           05A : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           05B : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           05C : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           05D : A002;  -- 	CLI    &B0010
           05E : B820;  -- 	LOADI  32
           05F : 98B2;  -- 	OUT	   SONAREN
           060 : BA58;  -- 	LOADI  600
           061 : 6A6B;  -- 	ADDI   619
           062 : 98B0;  -- 	OUT    SONALARM
           063 : 90AD;  -- 	IN	   DIST5
           064 : 9804;  -- 	OUT    SSEG1
           065 : 90B0;  -- 	IN     SONALARM
           066 : 6FE0;  -- 	ADDI   -32
           067 : 4078;  -- 	JZERO  InfLoop
           068 : 2869;  -- 	JUMP   Turn
           069 : 90AD;  -- 	IN     DIST5
           06A : 9804;  -- 	OUT    SSEG1
           06B : B864;  -- 	LOADI  100
           06C : 9883;  -- 	OUT    LVELCMD
           06D : 6F38;  -- 	ADDI   -200
           06E : 988B;  -- 	OUT    RVELCMD
           06F : 2863;  -- 	JUMP   Check
           070 : 90C2;  -- 	IN     Theta
           071 : 6FA6;  -- 	ADDI   -90
           072 : 80CF;  -- 	CALL   Abs         ; get abs(currentAngle - 90)
           073 : 6FFD;  -- 	ADDI   -3
           074 : 3870;  -- 	JPOS   TurnLoop    ; if angle error > 3, keep checking
           075 : 0A06;  -- 	LOAD   One
           076 : 1087;  -- 	STORE  DVel        ; use API to move forward
           077 : 2863;  -- 	JUMP   Check
           078 : 90AD;  -- 	IN     DIST5
           079 : 9804;  -- 	OUT    SSEG1
           07A : 2878;  -- 	JUMP   InfLoop
           07B : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           07C : 0A05;  -- 	LOAD   Zero        ; Stop everything.
           07D : 9883;  -- 	OUT    LVELCMD
           07E : 988B;  -- 	OUT    RVELCMD
           07F : 98B2;  -- 	OUT    SONAREN
           080 : 0883;  -- 	LOAD   DEAD        ; An indication that we are dead
           081 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           082 : 2882;  -- 	JUMP   Forever     ; Do this forever.
           083 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           084 : 8088;  -- 	CALL   ControlMovement
           085 : B000;  -- 	RETI   ; return from ISR
           086 : 0000;  -- DTheta:    DW 0
           087 : 0000;  -- DVel:      DW 0
           088 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           089 : 10C8;  -- 	STORE  MaxVal
           08A : 80B5;  -- 	CALL   GetThetaErr ; get the heading error
           08B : 6002;  -- 	SHIFT  2
           08C : 10B2;  -- 	STORE  CMAErr      ; hold temporarily
           08D : 6002;  -- 	SHIFT  2           ; multiply by another 4
           08E : 80BC;  -- 	CALL   CapValue    ; get a +/- max of 50
           08F : 18B2;  -- 	ADD    CMAErr
           090 : 10B2;  -- 	STORE  CMAErr      ; now contains a desired differential
           091 : B9FE;  -- 	LOADI  510
           092 : 10C8;  -- 	STORE  MaxVal
           093 : 0887;  -- 	LOAD   DVel
           094 : 80BC;  -- 	CALL   CapValue    ; ensure velocity is valid
           095 : 1087;  -- 	STORE  DVel        ; overwrite any invalid input
           096 : 18B2;  -- 	ADD    CMAErr
           097 : 80BC;  -- 	CALL   CapValue    ; ensure velocity is valid
           098 : 10B4;  -- 	STORE  CMAR
           099 : 08B2;  -- 	LOAD   CMAErr
           09A : 80D0;  -- 	CALL   Neg         ; left wheel gets negative differential
           09B : 1887;  -- 	ADD    DVel
           09C : 80BC;  -- 	CALL   CapValue
           09D : 10B3;  -- 	STORE  CMAL
           09E : 08B2;  -- 	LOAD   CMAErr
           09F : 6001;  -- 	SHIFT  1           ; double the differential
           0A0 : 10B2;  -- 	STORE  CMAErr
           0A1 : 08B4;  -- 	LOAD   CMAR
           0A2 : 20B3;  -- 	SUB    CMAL        ; calculate the actual differential
           0A3 : 20B2;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0A4 : 40AD;  -- 	JZERO  CMADone
           0A5 : 10B2;  -- 	STORE  CMAErr      ; the missing part
           0A6 : 18B3;  -- 	ADD    CMAL
           0A7 : 80BC;  -- 	CALL   CapValue
           0A8 : 10B3;  -- 	STORE  CMAL
           0A9 : 08B4;  -- 	LOAD   CMAR
           0AA : 20B2;  -- 	SUB    CMAErr
           0AB : 80BC;  -- 	CALL   CapValue
           0AC : 10B4;  -- 	STORE  CMAR
           0AD : 08B3;  -- 	LOAD   CMAL
           0AE : 9883;  -- 	OUT    LVELCMD
           0AF : 08B4;  -- 	LOAD   CMAR
           0B0 : 988B;  -- 	OUT    RVELCMD
           0B1 : 8800;  -- 	RETURN
           0B2 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0B3 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           0B4 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           0B5 : 90C2;  -- 	IN     THETA
           0B6 : 2086;  -- 	SUB    DTheta      ; actual - desired angle
           0B7 : 80D0;  -- 	CALL   Neg         ; desired - actual angle
           0B8 : 68B4;  -- 	ADDI   180
           0B9 : 80C9;  -- 	CALL   Mod360
           0BA : 6F4C;  -- 	ADDI   -180
           0BB : 8800;  -- 	RETURN
           0BC : 20C8;  -- 	SUB     MaxVal
           0BD : 38C3;  -- 	JPOS    CapVelHigh
           0BE : 18C8;  -- 	ADD     MaxVal
           0BF : 18C8;  -- 	ADD     MaxVal
           0C0 : 30C5;  -- 	JNEG    CapVelLow
           0C1 : 20C8;  -- 	SUB     MaxVal
           0C2 : 8800;  -- 	RETURN
           0C3 : 08C8;  -- 	LOAD    MaxVal
           0C4 : 8800;  -- 	RETURN
           0C5 : 08C8;  -- 	LOAD    MaxVal
           0C6 : 80D0;  -- 	CALL    Neg
           0C7 : 8800;  -- 	RETURN
           0C8 : 01FE;  -- 	MaxVal: DW 510
           0C9 : 30CC;  -- 	JNEG   M360N
           0CA : 6E98;  -- 	ADDI   -360
           0CB : 28C9;  -- 	JUMP   Mod360
           0CC : 6968;  -- 	ADDI   360
           0CD : 30CC;  -- 	JNEG   M360N
           0CE : 8800;  -- 	RETURN
           0CF : 38D2;  -- 	JPOS   Abs_r
           0D0 : 5A04;  -- 	XOR    NegOne       ; Flip all bits
           0D1 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0D2 : 8800;  -- 	RETURN
           0D3 : 0933;  -- 	LOAD   AtanY
           0D4 : 80CF;  -- 	CALL   Abs          ; abs(y)
           0D5 : 1135;  -- 	STORE  AtanT
           0D6 : 0932;  -- 	LOAD   AtanX        ; abs(x)
           0D7 : 80CF;  -- 	CALL   Abs
           0D8 : 2135;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0D9 : 30E4;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0DA : 0932;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0DB : 30E1;  -- 	JNEG   A2_R3
           0DC : 80F3;  -- 	CALL   A2_calc      ; Octants 1, 8
           0DD : 30DF;  -- 	JNEG   A2_R1n
           0DE : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0DF : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0E0 : 8800;  -- 	RETURN
           0E1 : 80F3;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0E2 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0E3 : 8800;  -- 	RETURN
           0E4 : 0933;  -- 	LOAD   AtanY        ; Swap input arguments
           0E5 : 1135;  -- 	STORE  AtanT
           0E6 : 0932;  -- 	LOAD   AtanX
           0E7 : 1133;  -- 	STORE  AtanY
           0E8 : 0935;  -- 	LOAD   AtanT
           0E9 : 1132;  -- 	STORE  AtanX
           0EA : 38EF;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0EB : 80F3;  -- 	CALL   A2_calc      ; else octants 6, 7
           0EC : 80D0;  -- 	CALL   Neg          ; Negatge the number
           0ED : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0EE : 8800;  -- 	RETURN
           0EF : 80F3;  -- 	CALL   A2_calc      ; Octants 2, 3
           0F0 : 80D0;  -- 	CALL   Neg          ; negate the angle
           0F1 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0F2 : 8800;  -- 	RETURN
           0F3 : 0933;  -- 	LOAD   AtanY
           0F4 : 1192;  -- 	STORE  d16sN        ; Y in numerator
           0F5 : 0932;  -- 	LOAD   AtanX
           0F6 : 1193;  -- 	STORE  d16sD        ; X in denominator
           0F7 : 811F;  -- 	CALL   A2_div       ; divide
           0F8 : 0998;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0F9 : 1134;  -- 	STORE  AtanRatio
           0FA : 115B;  -- 	STORE  m16sA
           0FB : 115C;  -- 	STORE  m16sB
           0FC : 8116;  -- 	CALL   A2_mult      ; X^2
           0FD : 115B;  -- 	STORE  m16sA
           0FE : 0936;  -- 	LOAD   A2c
           0FF : 115C;  -- 	STORE  m16sB
           100 : 8116;  -- 	CALL   A2_mult
           101 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           102 : 1193;  -- 	STORE  d16sD
           103 : 0934;  -- 	LOAD   AtanRatio
           104 : 1192;  -- 	STORE  d16sN        ; Ratio in numerator
           105 : 811F;  -- 	CALL   A2_div       ; divide
           106 : 0998;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           107 : 115B;  -- 	STORE  m16sA        ; <= result in radians
           108 : 0937;  -- 	LOAD   A2cd         ; degree conversion factor
           109 : 115C;  -- 	STORE  m16sB
           10A : 8116;  -- 	CALL   A2_mult      ; convert to degrees
           10B : 1135;  -- 	STORE  AtanT
           10C : 6017;  -- 	SHIFT  -7           ; check 7th bit
           10D : 4A06;  -- 	AND    One
           10E : 4113;  -- 	JZERO  A2_rdwn      ; round down
           10F : 0935;  -- 	LOAD   AtanT
           110 : 6018;  -- 	SHIFT  -8
           111 : 6801;  -- 	ADDI   1            ; round up
           112 : 8800;  -- 	RETURN
           113 : 0935;  -- 	LOAD   AtanT
           114 : 6018;  -- 	SHIFT  -8           ; round down
           115 : 8800;  -- 	RETURN
           116 : 8138;  -- 	CALL   Mult16s
           117 : 0960;  -- 	LOAD   mres16sH
           118 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           119 : 1160;  -- 	STORE  mres16sH
           11A : 095F;  -- 	LOAD   mres16sL
           11B : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           11C : 4A18;  -- 	AND    LowByte
           11D : 5160;  -- 	OR     mres16sH     ; combine high and low words of result
           11E : 8800;  -- 	RETURN
           11F : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           120 : 1135;  -- 	STORE  AtanT
           121 : 0935;  -- 	LOAD   AtanT
           122 : 6FFF;  -- 	ADDI   -1
           123 : 3926;  -- 	JPOS   A2_DN        ; not done; continue shifting
           124 : 8161;  -- 	CALL   Div16s       ; do the standard division
           125 : 8800;  -- 	RETURN
           126 : 1135;  -- 	STORE  AtanT
           127 : 0992;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           128 : 6001;  -- 	SHIFT  1
           129 : 5992;  -- 	XOR    d16sN        ; if the sign changed,
           12A : 312E;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           12B : 5992;  -- 	XOR    d16sN        ; get back shifted version
           12C : 1192;  -- 	STORE  d16sN
           12D : 2921;  -- 	JUMP   A2_DL
           12E : 0993;  -- 	LOAD   d16sD
           12F : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           130 : 1193;  -- 	STORE  d16sD
           131 : 2921;  -- 	JUMP   A2_DL
           132 : 0000;  -- AtanX:      DW 0
           133 : 0000;  -- AtanY:      DW 0
           134 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           135 : 0000;  -- AtanT:      DW 0        ; temporary value
           136 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           137 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           138 : B800;  -- 	LOADI  0
           139 : 115D;  -- 	STORE  m16sc        ; clear carry
           13A : 1160;  -- 	STORE  mres16sH     ; clear result
           13B : B810;  -- 	LOADI  16           ; load 16 to counter
           13C : 115E;  -- 	STORE  mcnt16s      
           13D : 095D;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           13E : 4142;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           13F : 0960;  -- 	LOAD   mres16sH     ; if a carry, 
           140 : 195B;  -- 	ADD    m16sA        ;  add multiplicand to result H
           141 : 1160;  -- 	STORE  mres16sH
           142 : 095C;  -- 	LOAD   m16sB
           143 : 4A06;  -- 	AND    One          ; check bit 0 of multiplier
           144 : 115D;  -- 	STORE  m16sc        ; save as next carry
           145 : 4149;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           146 : 0960;  -- 	LOAD   mres16sH     ; if bit 0 set,
           147 : 215B;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           148 : 1160;  -- 	STORE  mres16sH
           149 : 095C;  -- 	LOAD   m16sB
           14A : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           14B : 495A;  -- 	AND    c7FFF        ; clear msb
           14C : 115C;  -- 	STORE  m16sB
           14D : 0960;  -- 	LOAD   mres16sH     ; load result H
           14E : 600F;  -- 	SHIFT  15           ; move lsb to msb
           14F : 515C;  -- 	OR     m16sB
           150 : 115C;  -- 	STORE  m16sB        ; result L now includes carry out from H
           151 : 0960;  -- 	LOAD   mres16sH
           152 : 6011;  -- 	SHIFT  -1
           153 : 1160;  -- 	STORE  mres16sH     ; shift result H >>1
           154 : 095E;  -- 	LOAD   mcnt16s
           155 : 6FFF;  -- 	ADDI   -1           ; check counter
           156 : 393C;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           157 : 095C;  -- 	LOAD   m16sB
           158 : 115F;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           159 : 8800;  -- 	RETURN              ; Done
           15A : 7FFF;  -- c7FFF: DW &H7FFF
           15B : 0000;  -- m16sA: DW 0 ; multiplicand
           15C : 0000;  -- m16sB: DW 0 ; multipler
           15D : 0000;  -- m16sc: DW 0 ; carry
           15E : 0000;  -- mcnt16s: DW 0 ; counter
           15F : 0000;  -- mres16sL: DW 0 ; result low
           160 : 0000;  -- mres16sH: DW 0 ; result high
           161 : B800;  -- 	LOADI  0
           162 : 1199;  -- 	STORE  dres16sR     ; clear remainder result
           163 : 1196;  -- 	STORE  d16sC1       ; clear carry
           164 : 0992;  -- 	LOAD   d16sN
           165 : 5993;  -- 	XOR    d16sD
           166 : 1194;  -- 	STORE  d16sS        ; sign determination = N XOR D
           167 : B811;  -- 	LOADI  17
           168 : 1195;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           169 : 0993;  -- 	LOAD   d16sD
           16A : 80CF;  -- 	CALL   Abs          ; take absolute value of denominator
           16B : 1193;  -- 	STORE  d16sD
           16C : 0992;  -- 	LOAD   d16sN
           16D : 80CF;  -- 	CALL   Abs          ; take absolute value of numerator
           16E : 1192;  -- 	STORE  d16sN
           16F : 0992;  -- 	LOAD   d16sN
           170 : 601F;  -- 	SHIFT  -15          ; get msb
           171 : 4A06;  -- 	AND    One          ; only msb (because shift is arithmetic)
           172 : 1197;  -- 	STORE  d16sC2       ; store as carry
           173 : 0992;  -- 	LOAD   d16sN
           174 : 6001;  -- 	SHIFT  1            ; shift <<1
           175 : 5196;  -- 	OR     d16sC1       ; with carry
           176 : 1192;  -- 	STORE  d16sN
           177 : 0995;  -- 	LOAD   d16sT
           178 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           179 : 4189;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           17A : 1195;  -- 	STORE  d16sT
           17B : 0999;  -- 	LOAD   dres16sR
           17C : 6001;  -- 	SHIFT  1            ; shift remainder
           17D : 5197;  -- 	OR     d16sC2       ; with carry from other shift
           17E : 2193;  -- 	SUB    d16sD        ; subtract denominator from remainder
           17F : 3184;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           180 : 1199;  -- 	STORE  dres16sR
           181 : B801;  -- 	LOADI  1
           182 : 1196;  -- 	STORE  d16sC1       ; set carry
           183 : 296F;  -- 	JUMP   Div16s_loop
           184 : 1993;  -- 	ADD    d16sD        ; add denominator back in
           185 : 1199;  -- 	STORE  dres16sR
           186 : B800;  -- 	LOADI  0
           187 : 1196;  -- 	STORE  d16sC1       ; clear carry
           188 : 296F;  -- 	JUMP   Div16s_loop
           189 : 0992;  -- 	LOAD   d16sN
           18A : 1198;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           18B : 0994;  -- 	LOAD   d16sS        ; check the sign indicator
           18C : 318E;  -- 	JNEG   Div16s_neg
           18D : 8800;  -- 	RETURN
           18E : 0998;  -- 	LOAD   dres16sQ     ; need to negate the result
           18F : 80D0;  -- 	CALL   Neg
           190 : 1198;  -- 	STORE  dres16sQ
           191 : 8800;  -- 	RETURN	
           192 : 0000;  -- d16sN: DW 0 ; numerator
           193 : 0000;  -- d16sD: DW 0 ; denominator
           194 : 0000;  -- d16sS: DW 0 ; sign value
           195 : 0000;  -- d16sT: DW 0 ; temp counter
           196 : 0000;  -- d16sC1: DW 0 ; carry value
           197 : 0000;  -- d16sC2: DW 0 ; carry value
           198 : 0000;  -- dres16sQ: DW 0 ; quotient result
           199 : 0000;  -- dres16sR: DW 0 ; remainder result
           19A : 09C4;  -- 	LOAD   L2X
           19B : 80CF;  -- 	CALL   Abs
           19C : 11C6;  -- 	STORE  L2T1
           19D : 09C5;  -- 	LOAD   L2Y
           19E : 80CF;  -- 	CALL   Abs
           19F : 21C6;  -- 	SUB    L2T1
           1A0 : 31BC;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1A1 : 19C6;  -- 	ADD    L2T1
           1A2 : 115B;  -- 	STORE  m16sa
           1A3 : B8F6;  -- 	LOADI  246       ; max * 246
           1A4 : 115C;  -- 	STORE  m16sB
           1A5 : 8138;  -- 	CALL   Mult16s
           1A6 : 0960;  -- 	LOAD   mres16sH
           1A7 : 6008;  -- 	SHIFT  8
           1A8 : 11C7;  -- 	STORE  L2T2
           1A9 : 095F;  -- 	LOAD   mres16sL
           1AA : 6018;  -- 	SHIFT  -8        ; / 256
           1AB : 4A18;  -- 	AND    LowByte
           1AC : 51C7;  -- 	OR     L2T2
           1AD : 11C8;  -- 	STORE  L2T3
           1AE : 09C6;  -- 	LOAD   L2T1
           1AF : 115B;  -- 	STORE  m16sa
           1B0 : B868;  -- 	LOADI  104       ; min * 104
           1B1 : 115C;  -- 	STORE  m16sB
           1B2 : 8138;  -- 	CALL   Mult16s
           1B3 : 0960;  -- 	LOAD   mres16sH
           1B4 : 6008;  -- 	SHIFT  8
           1B5 : 11C7;  -- 	STORE  L2T2
           1B6 : 095F;  -- 	LOAD   mres16sL
           1B7 : 6018;  -- 	SHIFT  -8        ; / 256
           1B8 : 4A18;  -- 	AND    LowByte
           1B9 : 51C7;  -- 	OR     L2T2
           1BA : 19C8;  -- 	ADD    L2T3     ; sum
           1BB : 8800;  -- 	RETURN
           1BC : 19C6;  -- 	ADD    L2T1
           1BD : 11C7;  -- 	STORE  L2T2
           1BE : 09C6;  -- 	LOAD   L2T1
           1BF : 11C8;  -- 	STORE  L2T3
           1C0 : 09C7;  -- 	LOAD   L2T2
           1C1 : 11C6;  -- 	STORE  L2T1
           1C2 : 09C8;  -- 	LOAD   L2T3
           1C3 : 29A2;  -- 	JUMP   CalcDist
           1C4 : 0000;  -- L2X:  DW 0
           1C5 : 0000;  -- L2Y:  DW 0
           1C6 : 0000;  -- L2T1: DW 0
           1C7 : 0000;  -- L2T2: DW 0
           1C8 : 0000;  -- L2T3: DW 0
           1C9 : 9802;  -- 	OUT    TIMER
           1CA : 9002;  -- 	IN     TIMER
           1CB : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1CC : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1CD : 31CA;  -- 	JNEG   Wloop
           1CE : 8800;  -- 	RETURN
           1CF : 81E7;  -- 	CALL   GetBattLvl
           1D0 : 41CF;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1D1 : 2229;  -- 	SUB    MinBatt
           1D2 : 31D5;  -- 	JNEG   DeadBatt
           1D3 : 1A29;  -- 	ADD    MinBatt     ; get original value back
           1D4 : 8800;  -- 	RETURN
           1D5 : B820;  -- 	LOADI  &H20
           1D6 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1D7 : 81E7;  -- 	CALL   GetBattLvl  ; get the battery level
           1D8 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1D9 : 9805;  -- 	OUT    SSEG2
           1DA : 9806;  -- 	OUT    LCD
           1DB : 0A05;  -- 	LOAD   Zero
           1DC : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1DD : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1DE : 9807;  -- 	OUT    XLEDS
           1DF : 81C9;  -- 	CALL   Wait1       ; 1 second
           1E0 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           1E1 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1E2 : 0A05;  -- 	LOAD   Zero
           1E3 : 9801;  -- 	OUT    LEDS        ; LEDs off
           1E4 : 9807;  -- 	OUT    XLEDS
           1E5 : 81C9;  -- 	CALL   Wait1       ; 1 second
           1E6 : 29D5;  -- 	JUMP   DeadBatt    ; repeat forever
           1E7 : 0A2B;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1E8 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1E9 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1EA : 81F5;  -- 	CALL   BlockI2C    ; wait for it to finish
           1EB : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1EC : 8800;  -- 	RETURN
           1ED : 81F5;  -- 	CALL   BlockI2C    ; wait for idle
           1EE : 0A2A;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1EF : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1F0 : 0A05;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1F1 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1F2 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1F3 : 81F5;  -- 	CALL   BlockI2C    ; wait for it to finish
           1F4 : 8800;  -- 	RETURN
           1F5 : 0A05;  -- 	LOAD   Zero
           1F6 : 1203;  -- 	STORE  Temp        ; Used to check for timeout
           1F7 : 0A03;  -- 	LOAD   Temp
           1F8 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1F9 : 1203;  -- 	STORE  Temp
           1FA : 41FE;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1FB : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1FC : 39F7;  -- 	JPOS   BI2CL       ; If not 0, try again
           1FD : 8800;  -- 	RETURN             ; Else return
           1FE : 0A05;  -- 	LOAD   Zero
           1FF : 692C;  -- 	ADDI   &H12C       ; "I2C"
           200 : 9804;  -- 	OUT    SSEG1
           201 : 9805;  -- 	OUT    SSEG2       ; display error message
           202 : 29FE;  -- 	JUMP   I2CError
           203 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           204 : FFFF;  -- NegOne:   DW -1
           205 : 0000;  -- Zero:     DW 0
           206 : 0001;  -- One:      DW 1
           207 : 0002;  -- Two:      DW 2
           208 : 0003;  -- Three:    DW 3
           209 : 0004;  -- Four:     DW 4
           20A : 0005;  -- Five:     DW 5
           20B : 0006;  -- Six:      DW 6
           20C : 0007;  -- Seven:    DW 7
           20D : 0008;  -- Eight:    DW 8
           20E : 0009;  -- Nine:     DW 9
           20F : 000A;  -- Ten:      DW 10
           210 : 0001;  -- Mask0:    DW &B00000001
           211 : 0002;  -- Mask1:    DW &B00000010
           212 : 0004;  -- Mask2:    DW &B00000100
           213 : 0008;  -- Mask3:    DW &B00001000
           214 : 0010;  -- Mask4:    DW &B00010000
           215 : 0020;  -- Mask5:    DW &B00100000
           216 : 0040;  -- Mask6:    DW &B01000000
           217 : 0080;  -- Mask7:    DW &B10000000
           218 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           219 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           21A : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           21B : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           21C : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           21D : 036F;  -- Ft3:      DW 879
           21E : 0494;  -- Ft4:      DW 1172
           21F : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           220 : 00B4;  -- Deg180:   DW 180       ; 180
           221 : 010E;  -- Deg270:   DW 270       ; 270
           222 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           223 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           224 : FF9C;  -- RSlow:    DW -100
           225 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           226 : FEA2;  -- RMid:     DW -350
           227 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           228 : FE0C;  -- RFast:    DW -500
           229 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           22A : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           22B : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           22C : 0000;  -- 	DW 0
  END;
