-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28C5;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A66;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10E3;  -- 	STORE  DVel        ; Reset API variables
           009 : 10E2;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8249;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 822B;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A75;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A72;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A72;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 125F;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 525F;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A73;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A66;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : B801;  -- 	LOADI	1
           028 : 9804;  -- 	OUT		SSEG1
           029 : 0A66;  -- 	LOAD	ZERO
           02A : 6A62;  -- 	ADDI	610
           02B : 6A61;  -- 	ADDI	609
           02C : 98B0;  -- 	OUT		SONALARM
           02D : 1260;  -- 	STORE	FOUNDREFLECTOR
           02E : B820;  -- 	LOADI  32
           02F : 98B2;  -- 	OUT	   SONAREN
           030 : 0A86;  -- 	LOAD	FMid
           031 : 10E3;  -- 	STORE  	DVel
           032 : 90B0;  -- 	IN		SONALARM
           033 : 6FE0;  -- 	ADDI	-32
           034 : 4036;  -- 	JZERO	GetClose
           035 : 2832;  -- 	JUMP 	FindLoop
           036 : 90AC;  -- 	IN		DIST4
           037 : 1260;  -- 	STORE 	FOUNDREFLECTOR
           038 : 90AD;  -- 	IN 		DIST5
           039 : 2260;  -- 	SUB		FOUNDREFLECTOR
           03A : 6814;  -- 	ADDI	20
           03B : 9804;  -- 	OUT		SSEG1
           03C : 3044;  -- 	JNEG	Stop
           03D : 2838;  -- 	JUMP	GoForward
           03E : 0A60;  -- 	LOAD	FOUNDREFLECTOR
           03F : 6801;  -- 	ADDI	1
           040 : 1260;  -- 	STORE   FOUNDREFLECTOR
           041 : 6FF6;  -- 	ADDI    -10
           042 : 3844;  -- 	JPOS    Stop
           043 : 283E;  -- 	JUMP    Found
           044 : B802;  -- 	LOADI	2
           045 : 9804;  -- 	OUT		SSEG1
           046 : 98C3;  -- 	OUT		RESETPOS
           047 : 90C2;  -- 	IN		Theta
           048 : 1261;  -- 	STORE	StartTheta
           049 : 8085;  -- 	CALL	TurnRight90
           04A : 98C3;  -- 	OUT		RESETPOS
           04B : A002;  -- 	CLI    &B0010 ; disable movement API
           04C : B803;  -- 	LOADI	3
           04D : 9804;  -- 	OUT		SSEG1
           04E : 0A73;  -- 	LOAD	MASK2
           04F : 98B2;  -- 	OUT		SONAREN
           050 : 90AA;  -- 	IN		DIST2
           051 : 9A63;  -- 	OUT		s2dist		; store distance from reflector to s2
           052 : B931;  -- 	LOADI	305			; 305 mm = 1 ft
           053 : 98B0;  -- 	OUT		SONALARM
           054 : 90B0;  -- 	IN		SONALARM
           055 : 2273;  -- 	SUB		MASK2
           056 : 405B;  -- 	JZERO	FinMove1
           057 : B864;  -- 	LOADI	100
           058 : 9883;  -- 	OUT		LVELCMD
           059 : 988B;  -- 	OUT		RVELCMD
           05A : 2854;  -- 	JUMP	LoopMove1
           05B : 90C0;  -- 	IN		XPOS
           05C : 1262;  -- 	STORE	linedist	; store odometry distance traveled from line
           05D : B800;  -- 	LOADI	0
           05E : 98B2;  -- 	OUT		SONAREN		; turn off sensors
           05F : B804;  -- 	LOADI	4
           060 : 9804;  -- 	OUT		SSEG1
           061 : 98C3;  -- 	OUT		RESETPOS
           062 : 8090;  -- 	CALL	TurnLeft90
           063 : 98C3;  -- 	OUT		RESETPOS
           064 : A002;  -- 	CLI    &B0010
           065 : 98C3;  -- 	OUT		RESETPOS
           066 : B801;  -- 	LOADI	1
           067 : 9805;  -- 	OUT		SSEG2
           068 : 90C2;  --     IN     THETA
           069 : 681E;  --     ADDI   30
           06A : 1261;  --     STORE  STARTTHETA
           06B : B802;  -- 	LOADI	2
           06C : 9805;  -- 	OUT		SSEG2
           06D : B9FF;  -- 	LOADI  511
           06E : 9883;  -- 	OUT    LVELCMD
           06F : 6F24;  -- 	ADDI   -220
           070 : 988B;  --     OUT    RVELCMD
           071 : 90C2;  --     IN     THETA
           072 : 2261;  --     SUB    STARTTHETA
           073 : 9805;  --     OUT    SSEG2
           074 : 4076;  --     JZERO  CircleEnd
           075 : 286B;  --     JUMP   CircleLoop
           076 : B805;  -- 	LOADI	5
           077 : 9804;  -- 	OUT		SSEG1
           078 : 8090;  -- 	CALL	TurnLeft90
           079 : A002;  -- 	CLI		&B0010
           07A : 98C3;  -- 	OUT		RESETPOS
           07B : 90C0;  -- 	IN		XPOS
           07C : 2262;  -- 	SUB		linedist
           07D : 3882;  -- 	JPOS	TurnBack
           07E : B8C8;  -- 	LOADI	200
           07F : 9883;  -- 	OUT		LVELCMD
           080 : 988B;  -- 	OUT		RVELCMD
           081 : 287B;  -- 	JUMP	CheckDist
           082 : A802;  -- 	SEI		&B0010
           083 : 8085;  -- 	CALL 	TurnRight90
           084 : 2827;  -- 	JUMP	Find
           085 : 90C2;  -- 	IN		Theta
           086 : 1261;  -- 	STORE	StartTheta
           087 : B90E;  -- 	LOADI	270
           088 : 10E2;  -- 	STORE	DTHETA
           089 : 90C2;  -- 	IN		Theta
           08A : 2261;  -- 	SUB		StartTheta
           08B : 6EF2;  -- 	ADDI	-270
           08C : 812B;  -- 	CALL	ABS
           08D : 6FFD;  -- 	ADDI	-3
           08E : 3889;  -- 	JPOS	CheckAngleRight90
           08F : 8800;  -- 	RETURN
           090 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           091 : 98C3;  -- 	OUT		RESETPOS
           092 : B855;  -- 	LOADI	85
           093 : 10E2;  -- 	STORE	DTHETA
           094 : 90C2;  -- 	IN     Theta
           095 : 6FA6;  -- 	ADDI   -90
           096 : 812B;  -- 	CALL   Abs         ; get abs(currentAngle - 90)
           097 : 6FFD;  -- 	ADDI   -3
           098 : 3894;  -- 	JPOS   CheckAngleLeft90    ; if angle error > 3, keep checking
           099 : 8800;  -- 	RETURN
           09A : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           09B : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           09C : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           09D : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           09E : A002;  -- 	CLI    &B0010
           09F : B820;  -- 	LOADI  32
           0A0 : 98B2;  -- 	OUT	   SONAREN
           0A1 : BA58;  -- 	LOADI  600
           0A2 : 6A6B;  -- 	ADDI   619
           0A3 : 98B0;  -- 	OUT    SONALARM
           0A4 : 90AD;  -- 	IN	   DIST5
           0A5 : 9804;  -- 	OUT    SSEG1
           0A6 : 90B0;  -- 	IN     SONALARM
           0A7 : 6FE0;  -- 	ADDI   -32
           0A8 : 40B9;  -- 	JZERO  InfLoop
           0A9 : 28AA;  -- 	JUMP   Turn
           0AA : 90AD;  -- 	IN     DIST5
           0AB : 9804;  -- 	OUT    SSEG1
           0AC : B864;  -- 	LOADI  100
           0AD : 9883;  -- 	OUT    LVELCMD
           0AE : 6F38;  -- 	ADDI   -200
           0AF : 988B;  -- 	OUT    RVELCMD
           0B0 : 28A4;  -- 	JUMP   Check
           0B1 : 90C2;  -- 	IN     Theta
           0B2 : 6FA6;  -- 	ADDI   -90
           0B3 : 812B;  -- 	CALL   Abs         ; get abs(currentAngle - 90)
           0B4 : 6FFD;  -- 	ADDI   -3
           0B5 : 38B1;  -- 	JPOS   TurnLoop    ; if angle error > 3, keep checking
           0B6 : 0A67;  -- 	LOAD   One
           0B7 : 10E3;  -- 	STORE  DVel        ; use API to move forward
           0B8 : 28A4;  -- 	JUMP   Check
           0B9 : 90AD;  -- 	IN     DIST5
           0BA : 9804;  -- 	OUT    SSEG1
           0BB : 28B9;  -- 	JUMP   InfLoop
           0BC : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0BD : 0A66;  -- 	LOAD   Zero        ; Stop everything.
           0BE : 9883;  -- 	OUT    LVELCMD
           0BF : 988B;  -- 	OUT    RVELCMD
           0C0 : 98B2;  -- 	OUT    SONAREN
           0C1 : 08C4;  -- 	LOAD   DEAD        ; An indication that we are dead
           0C2 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0C3 : 28C3;  -- 	JUMP   Forever     ; Do this forever.
           0C4 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0C5 : 80E4;  -- 	CALL   ControlMovement
           0C6 : B000;  -- 	RETI   ; return from ISR
           0C7 : 90C0;  -- 	IN		XPOS
           0C8 : 9804;  -- 	OUT		SSEG1
           0C9 : 6D9E;  -- 	ADDI   	-610
           0CA : 6D9E;  -- 	ADDI   	-610
           0CB : 6D9E;  -- 	ADDI   	-610
           0CC : 6D9E;  -- 	ADDI   	-610
           0CD : 6D9E;  -- 	ADDI   	-610
           0CE : 6D9E;  -- 	ADDI   	-610
           0CF : 38D1;  -- 	JPOS   	ReachedEnd
           0D0 : 8800;  -- 	RETURN
           0D1 : 6D9E;  -- 	ADDI   	-610
           0D2 : 6D9E;  -- 	ADDI   	-610
           0D3 : 6D9E;  -- 	ADDI   	-610
           0D4 : 6D9E;  -- 	ADDI   	-610
           0D5 : 6D9E;  -- 	ADDI   	-610
           0D6 : 6D9E;  -- 	ADDI   	-610
           0D7 : 6D9E;  -- 	ADDI   	-610
           0D8 : 6D9E;  -- 	ADDI   	-610
           0D9 : 38DC;  -- 	JPOS   	ReachedStart
           0DA : 80DF;  -- 	CALL   	TurnAtEnd
           0DB : 8800;  -- 	RETURN
           0DC : 80DF;  -- 	CALL	TurnAtEnd
           0DD : 98C3;  -- 	OUT		RESETPOS
           0DE : 8800;  -- 	RETURN
           0DF : B8B4;  -- 	LOADI  	180
           0E0 : 10E2;  -- 	STORE	DTheta
           0E1 : 8800;  -- 	RETURN
           0E2 : 0000;  -- DTheta:    DW 0
           0E3 : 0000;  -- DVel:      DW 0
           0E4 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0E5 : 1124;  -- 	STORE  MaxVal
           0E6 : 8111;  -- 	CALL   GetThetaErr ; get the heading error
           0E7 : 6002;  -- 	SHIFT  2
           0E8 : 110E;  -- 	STORE  CMAErr      ; hold temporarily
           0E9 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0EA : 8118;  -- 	CALL   CapValue    ; get a +/- max of 50
           0EB : 190E;  -- 	ADD    CMAErr
           0EC : 110E;  -- 	STORE  CMAErr      ; now contains a desired differential
           0ED : B9FE;  -- 	LOADI  510
           0EE : 1124;  -- 	STORE  MaxVal
           0EF : 08E3;  -- 	LOAD   DVel
           0F0 : 8118;  -- 	CALL   CapValue    ; ensure velocity is valid
           0F1 : 10E3;  -- 	STORE  DVel        ; overwrite any invalid input
           0F2 : 190E;  -- 	ADD    CMAErr
           0F3 : 8118;  -- 	CALL   CapValue    ; ensure velocity is valid
           0F4 : 1110;  -- 	STORE  CMAR
           0F5 : 090E;  -- 	LOAD   CMAErr
           0F6 : 812C;  -- 	CALL   Neg         ; left wheel gets negative differential
           0F7 : 18E3;  -- 	ADD    DVel
           0F8 : 8118;  -- 	CALL   CapValue
           0F9 : 110F;  -- 	STORE  CMAL
           0FA : 090E;  -- 	LOAD   CMAErr
           0FB : 6001;  -- 	SHIFT  1           ; double the differential
           0FC : 110E;  -- 	STORE  CMAErr
           0FD : 0910;  -- 	LOAD   CMAR
           0FE : 210F;  -- 	SUB    CMAL        ; calculate the actual differential
           0FF : 210E;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           100 : 4109;  -- 	JZERO  CMADone
           101 : 110E;  -- 	STORE  CMAErr      ; the missing part
           102 : 190F;  -- 	ADD    CMAL
           103 : 8118;  -- 	CALL   CapValue
           104 : 110F;  -- 	STORE  CMAL
           105 : 0910;  -- 	LOAD   CMAR
           106 : 210E;  -- 	SUB    CMAErr
           107 : 8118;  -- 	CALL   CapValue
           108 : 1110;  -- 	STORE  CMAR
           109 : 090F;  -- 	LOAD   CMAL
           10A : 9883;  -- 	OUT    LVELCMD
           10B : 0910;  -- 	LOAD   CMAR
           10C : 988B;  -- 	OUT    RVELCMD
           10D : 8800;  -- 	RETURN
           10E : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           10F : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           110 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           111 : 90C2;  -- 	IN     THETA
           112 : 20E2;  -- 	SUB    DTheta      ; actual - desired angle
           113 : 812C;  -- 	CALL   Neg         ; desired - actual angle
           114 : 68B4;  -- 	ADDI   180
           115 : 8125;  -- 	CALL   Mod360
           116 : 6F4C;  -- 	ADDI   -180
           117 : 8800;  -- 	RETURN
           118 : 2124;  -- 	SUB     MaxVal
           119 : 391F;  -- 	JPOS    CapVelHigh
           11A : 1924;  -- 	ADD     MaxVal
           11B : 1924;  -- 	ADD     MaxVal
           11C : 3121;  -- 	JNEG    CapVelLow
           11D : 2124;  -- 	SUB     MaxVal
           11E : 8800;  -- 	RETURN
           11F : 0924;  -- 	LOAD    MaxVal
           120 : 8800;  -- 	RETURN
           121 : 0924;  -- 	LOAD    MaxVal
           122 : 812C;  -- 	CALL    Neg
           123 : 8800;  -- 	RETURN
           124 : 01FE;  -- 	MaxVal: DW 510
           125 : 3128;  -- 	JNEG   M360N
           126 : 6E98;  -- 	ADDI   -360
           127 : 2925;  -- 	JUMP   Mod360
           128 : 6968;  -- 	ADDI   360
           129 : 3128;  -- 	JNEG   M360N
           12A : 8800;  -- 	RETURN
           12B : 392E;  -- 	JPOS   Abs_r
           12C : 5A65;  -- 	XOR    NegOne       ; Flip all bits
           12D : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           12E : 8800;  -- 	RETURN
           12F : 098F;  -- 	LOAD   AtanY
           130 : 812B;  -- 	CALL   Abs          ; abs(y)
           131 : 1191;  -- 	STORE  AtanT
           132 : 098E;  -- 	LOAD   AtanX        ; abs(x)
           133 : 812B;  -- 	CALL   Abs
           134 : 2191;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           135 : 3140;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           136 : 098E;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           137 : 313D;  -- 	JNEG   A2_R3
           138 : 814F;  -- 	CALL   A2_calc      ; Octants 1, 8
           139 : 313B;  -- 	JNEG   A2_R1n
           13A : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           13B : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           13C : 8800;  -- 	RETURN
           13D : 814F;  -- 	CALL   A2_calc      ; Octants 4, 5            
           13E : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           13F : 8800;  -- 	RETURN
           140 : 098F;  -- 	LOAD   AtanY        ; Swap input arguments
           141 : 1191;  -- 	STORE  AtanT
           142 : 098E;  -- 	LOAD   AtanX
           143 : 118F;  -- 	STORE  AtanY
           144 : 0991;  -- 	LOAD   AtanT
           145 : 118E;  -- 	STORE  AtanX
           146 : 394B;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           147 : 814F;  -- 	CALL   A2_calc      ; else octants 6, 7
           148 : 812C;  -- 	CALL   Neg          ; Negatge the number
           149 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           14A : 8800;  -- 	RETURN
           14B : 814F;  -- 	CALL   A2_calc      ; Octants 2, 3
           14C : 812C;  -- 	CALL   Neg          ; negate the angle
           14D : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           14E : 8800;  -- 	RETURN
           14F : 098F;  -- 	LOAD   AtanY
           150 : 11EE;  -- 	STORE  d16sN        ; Y in numerator
           151 : 098E;  -- 	LOAD   AtanX
           152 : 11EF;  -- 	STORE  d16sD        ; X in denominator
           153 : 817B;  -- 	CALL   A2_div       ; divide
           154 : 09F4;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           155 : 1190;  -- 	STORE  AtanRatio
           156 : 11B7;  -- 	STORE  m16sA
           157 : 11B8;  -- 	STORE  m16sB
           158 : 8172;  -- 	CALL   A2_mult      ; X^2
           159 : 11B7;  -- 	STORE  m16sA
           15A : 0992;  -- 	LOAD   A2c
           15B : 11B8;  -- 	STORE  m16sB
           15C : 8172;  -- 	CALL   A2_mult
           15D : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           15E : 11EF;  -- 	STORE  d16sD
           15F : 0990;  -- 	LOAD   AtanRatio
           160 : 11EE;  -- 	STORE  d16sN        ; Ratio in numerator
           161 : 817B;  -- 	CALL   A2_div       ; divide
           162 : 09F4;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           163 : 11B7;  -- 	STORE  m16sA        ; <= result in radians
           164 : 0993;  -- 	LOAD   A2cd         ; degree conversion factor
           165 : 11B8;  -- 	STORE  m16sB
           166 : 8172;  -- 	CALL   A2_mult      ; convert to degrees
           167 : 1191;  -- 	STORE  AtanT
           168 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           169 : 4A67;  -- 	AND    One
           16A : 416F;  -- 	JZERO  A2_rdwn      ; round down
           16B : 0991;  -- 	LOAD   AtanT
           16C : 6018;  -- 	SHIFT  -8
           16D : 6801;  -- 	ADDI   1            ; round up
           16E : 8800;  -- 	RETURN
           16F : 0991;  -- 	LOAD   AtanT
           170 : 6018;  -- 	SHIFT  -8           ; round down
           171 : 8800;  -- 	RETURN
           172 : 8194;  -- 	CALL   Mult16s
           173 : 09BC;  -- 	LOAD   mres16sH
           174 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           175 : 11BC;  -- 	STORE  mres16sH
           176 : 09BB;  -- 	LOAD   mres16sL
           177 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           178 : 4A79;  -- 	AND    LowByte
           179 : 51BC;  -- 	OR     mres16sH     ; combine high and low words of result
           17A : 8800;  -- 	RETURN
           17B : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           17C : 1191;  -- 	STORE  AtanT
           17D : 0991;  -- 	LOAD   AtanT
           17E : 6FFF;  -- 	ADDI   -1
           17F : 3982;  -- 	JPOS   A2_DN        ; not done; continue shifting
           180 : 81BD;  -- 	CALL   Div16s       ; do the standard division
           181 : 8800;  -- 	RETURN
           182 : 1191;  -- 	STORE  AtanT
           183 : 09EE;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           184 : 6001;  -- 	SHIFT  1
           185 : 59EE;  -- 	XOR    d16sN        ; if the sign changed,
           186 : 318A;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           187 : 59EE;  -- 	XOR    d16sN        ; get back shifted version
           188 : 11EE;  -- 	STORE  d16sN
           189 : 297D;  -- 	JUMP   A2_DL
           18A : 09EF;  -- 	LOAD   d16sD
           18B : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           18C : 11EF;  -- 	STORE  d16sD
           18D : 297D;  -- 	JUMP   A2_DL
           18E : 0000;  -- AtanX:      DW 0
           18F : 0000;  -- AtanY:      DW 0
           190 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           191 : 0000;  -- AtanT:      DW 0        ; temporary value
           192 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           193 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           194 : B800;  -- 	LOADI  0
           195 : 11B9;  -- 	STORE  m16sc        ; clear carry
           196 : 11BC;  -- 	STORE  mres16sH     ; clear result
           197 : B810;  -- 	LOADI  16           ; load 16 to counter
           198 : 11BA;  -- 	STORE  mcnt16s      
           199 : 09B9;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           19A : 419E;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           19B : 09BC;  -- 	LOAD   mres16sH     ; if a carry, 
           19C : 19B7;  -- 	ADD    m16sA        ;  add multiplicand to result H
           19D : 11BC;  -- 	STORE  mres16sH
           19E : 09B8;  -- 	LOAD   m16sB
           19F : 4A67;  -- 	AND    One          ; check bit 0 of multiplier
           1A0 : 11B9;  -- 	STORE  m16sc        ; save as next carry
           1A1 : 41A5;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1A2 : 09BC;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1A3 : 21B7;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1A4 : 11BC;  -- 	STORE  mres16sH
           1A5 : 09B8;  -- 	LOAD   m16sB
           1A6 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1A7 : 49B6;  -- 	AND    c7FFF        ; clear msb
           1A8 : 11B8;  -- 	STORE  m16sB
           1A9 : 09BC;  -- 	LOAD   mres16sH     ; load result H
           1AA : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1AB : 51B8;  -- 	OR     m16sB
           1AC : 11B8;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1AD : 09BC;  -- 	LOAD   mres16sH
           1AE : 6011;  -- 	SHIFT  -1
           1AF : 11BC;  -- 	STORE  mres16sH     ; shift result H >>1
           1B0 : 09BA;  -- 	LOAD   mcnt16s
           1B1 : 6FFF;  -- 	ADDI   -1           ; check counter
           1B2 : 3998;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1B3 : 09B8;  -- 	LOAD   m16sB
           1B4 : 11BB;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1B5 : 8800;  -- 	RETURN              ; Done
           1B6 : 7FFF;  -- c7FFF: DW &H7FFF
           1B7 : 0000;  -- m16sA: DW 0 ; multiplicand
           1B8 : 0000;  -- m16sB: DW 0 ; multipler
           1B9 : 0000;  -- m16sc: DW 0 ; carry
           1BA : 0000;  -- mcnt16s: DW 0 ; counter
           1BB : 0000;  -- mres16sL: DW 0 ; result low
           1BC : 0000;  -- mres16sH: DW 0 ; result high
           1BD : B800;  -- 	LOADI  0
           1BE : 11F5;  -- 	STORE  dres16sR     ; clear remainder result
           1BF : 11F2;  -- 	STORE  d16sC1       ; clear carry
           1C0 : 09EE;  -- 	LOAD   d16sN
           1C1 : 59EF;  -- 	XOR    d16sD
           1C2 : 11F0;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1C3 : B811;  -- 	LOADI  17
           1C4 : 11F1;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1C5 : 09EF;  -- 	LOAD   d16sD
           1C6 : 812B;  -- 	CALL   Abs          ; take absolute value of denominator
           1C7 : 11EF;  -- 	STORE  d16sD
           1C8 : 09EE;  -- 	LOAD   d16sN
           1C9 : 812B;  -- 	CALL   Abs          ; take absolute value of numerator
           1CA : 11EE;  -- 	STORE  d16sN
           1CB : 09EE;  -- 	LOAD   d16sN
           1CC : 601F;  -- 	SHIFT  -15          ; get msb
           1CD : 4A67;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1CE : 11F3;  -- 	STORE  d16sC2       ; store as carry
           1CF : 09EE;  -- 	LOAD   d16sN
           1D0 : 6001;  -- 	SHIFT  1            ; shift <<1
           1D1 : 51F2;  -- 	OR     d16sC1       ; with carry
           1D2 : 11EE;  -- 	STORE  d16sN
           1D3 : 09F1;  -- 	LOAD   d16sT
           1D4 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1D5 : 41E5;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1D6 : 11F1;  -- 	STORE  d16sT
           1D7 : 09F5;  -- 	LOAD   dres16sR
           1D8 : 6001;  -- 	SHIFT  1            ; shift remainder
           1D9 : 51F3;  -- 	OR     d16sC2       ; with carry from other shift
           1DA : 21EF;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1DB : 31E0;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1DC : 11F5;  -- 	STORE  dres16sR
           1DD : B801;  -- 	LOADI  1
           1DE : 11F2;  -- 	STORE  d16sC1       ; set carry
           1DF : 29CB;  -- 	JUMP   Div16s_loop
           1E0 : 19EF;  -- 	ADD    d16sD        ; add denominator back in
           1E1 : 11F5;  -- 	STORE  dres16sR
           1E2 : B800;  -- 	LOADI  0
           1E3 : 11F2;  -- 	STORE  d16sC1       ; clear carry
           1E4 : 29CB;  -- 	JUMP   Div16s_loop
           1E5 : 09EE;  -- 	LOAD   d16sN
           1E6 : 11F4;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1E7 : 09F0;  -- 	LOAD   d16sS        ; check the sign indicator
           1E8 : 31EA;  -- 	JNEG   Div16s_neg
           1E9 : 8800;  -- 	RETURN
           1EA : 09F4;  -- 	LOAD   dres16sQ     ; need to negate the result
           1EB : 812C;  -- 	CALL   Neg
           1EC : 11F4;  -- 	STORE  dres16sQ
           1ED : 8800;  -- 	RETURN	
           1EE : 0000;  -- d16sN: DW 0 ; numerator
           1EF : 0000;  -- d16sD: DW 0 ; denominator
           1F0 : 0000;  -- d16sS: DW 0 ; sign value
           1F1 : 0000;  -- d16sT: DW 0 ; temp counter
           1F2 : 0000;  -- d16sC1: DW 0 ; carry value
           1F3 : 0000;  -- d16sC2: DW 0 ; carry value
           1F4 : 0000;  -- dres16sQ: DW 0 ; quotient result
           1F5 : 0000;  -- dres16sR: DW 0 ; remainder result
           1F6 : 0A20;  -- 	LOAD   L2X
           1F7 : 812B;  -- 	CALL   Abs
           1F8 : 1222;  -- 	STORE  L2T1
           1F9 : 0A21;  -- 	LOAD   L2Y
           1FA : 812B;  -- 	CALL   Abs
           1FB : 2222;  -- 	SUB    L2T1
           1FC : 3218;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1FD : 1A22;  -- 	ADD    L2T1
           1FE : 11B7;  -- 	STORE  m16sa
           1FF : B8F6;  -- 	LOADI  246       ; max * 246
           200 : 11B8;  -- 	STORE  m16sB
           201 : 8194;  -- 	CALL   Mult16s
           202 : 09BC;  -- 	LOAD   mres16sH
           203 : 6008;  -- 	SHIFT  8
           204 : 1223;  -- 	STORE  L2T2
           205 : 09BB;  -- 	LOAD   mres16sL
           206 : 6018;  -- 	SHIFT  -8        ; / 256
           207 : 4A79;  -- 	AND    LowByte
           208 : 5223;  -- 	OR     L2T2
           209 : 1224;  -- 	STORE  L2T3
           20A : 0A22;  -- 	LOAD   L2T1
           20B : 11B7;  -- 	STORE  m16sa
           20C : B868;  -- 	LOADI  104       ; min * 104
           20D : 11B8;  -- 	STORE  m16sB
           20E : 8194;  -- 	CALL   Mult16s
           20F : 09BC;  -- 	LOAD   mres16sH
           210 : 6008;  -- 	SHIFT  8
           211 : 1223;  -- 	STORE  L2T2
           212 : 09BB;  -- 	LOAD   mres16sL
           213 : 6018;  -- 	SHIFT  -8        ; / 256
           214 : 4A79;  -- 	AND    LowByte
           215 : 5223;  -- 	OR     L2T2
           216 : 1A24;  -- 	ADD    L2T3     ; sum
           217 : 8800;  -- 	RETURN
           218 : 1A22;  -- 	ADD    L2T1
           219 : 1223;  -- 	STORE  L2T2
           21A : 0A22;  -- 	LOAD   L2T1
           21B : 1224;  -- 	STORE  L2T3
           21C : 0A23;  -- 	LOAD   L2T2
           21D : 1222;  -- 	STORE  L2T1
           21E : 0A24;  -- 	LOAD   L2T3
           21F : 29FE;  -- 	JUMP   CalcDist
           220 : 0000;  -- L2X:  DW 0
           221 : 0000;  -- L2Y:  DW 0
           222 : 0000;  -- L2T1: DW 0
           223 : 0000;  -- L2T2: DW 0
           224 : 0000;  -- L2T3: DW 0
           225 : 9802;  -- 	OUT    TIMER
           226 : 9002;  -- 	IN     TIMER
           227 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           228 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           229 : 3226;  -- 	JNEG   Wloop
           22A : 8800;  -- 	RETURN
           22B : 8243;  -- 	CALL   GetBattLvl
           22C : 422B;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           22D : 228A;  -- 	SUB    MinBatt
           22E : 3231;  -- 	JNEG   DeadBatt
           22F : 1A8A;  -- 	ADD    MinBatt     ; get original value back
           230 : 8800;  -- 	RETURN
           231 : B820;  -- 	LOADI  &H20
           232 : 980A;  -- 	OUT    BEEP        ; start beep sound
           233 : 8243;  -- 	CALL   GetBattLvl  ; get the battery level
           234 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           235 : 9805;  -- 	OUT    SSEG2
           236 : 9806;  -- 	OUT    LCD
           237 : 0A66;  -- 	LOAD   Zero
           238 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           239 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           23A : 9807;  -- 	OUT    XLEDS
           23B : 8225;  -- 	CALL   Wait1       ; 1 second
           23C : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           23D : 980A;  -- 	OUT    BEEP        ; stop beeping
           23E : 0A66;  -- 	LOAD   Zero
           23F : 9801;  -- 	OUT    LEDS        ; LEDs off
           240 : 9807;  -- 	OUT    XLEDS
           241 : 8225;  -- 	CALL   Wait1       ; 1 second
           242 : 2A31;  -- 	JUMP   DeadBatt    ; repeat forever
           243 : 0A8C;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           244 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           245 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           246 : 8251;  -- 	CALL   BlockI2C    ; wait for it to finish
           247 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           248 : 8800;  -- 	RETURN
           249 : 8251;  -- 	CALL   BlockI2C    ; wait for idle
           24A : 0A8B;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           24B : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           24C : 0A66;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           24D : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           24E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           24F : 8251;  -- 	CALL   BlockI2C    ; wait for it to finish
           250 : 8800;  -- 	RETURN
           251 : 0A66;  -- 	LOAD   Zero
           252 : 125F;  -- 	STORE  Temp        ; Used to check for timeout
           253 : 0A5F;  -- 	LOAD   Temp
           254 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           255 : 125F;  -- 	STORE  Temp
           256 : 425A;  -- 	JZERO  I2CError    ; Timeout occurred; error
           257 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           258 : 3A53;  -- 	JPOS   BI2CL       ; If not 0, try again
           259 : 8800;  -- 	RETURN             ; Else return
           25A : 0A66;  -- 	LOAD   Zero
           25B : 692C;  -- 	ADDI   &H12C       ; "I2C"
           25C : 9804;  -- 	OUT    SSEG1
           25D : 9805;  -- 	OUT    SSEG2       ; display error message
           25E : 2A5A;  -- 	JUMP   I2CError
           25F : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           260 : 0000;  -- FOUNDREFLECTOR:	DW 0
           261 : 0000;  -- StartTheta:		DW 0
           262 : 0000;  -- linedist:	DW 0
           263 : 0000;  -- s2dist:		DW 0
           264 : 0000;  -- s3dist:		DW 0
           265 : FFFF;  -- NegOne:   DW -1
           266 : 0000;  -- Zero:     DW 0
           267 : 0001;  -- One:      DW 1
           268 : 0002;  -- Two:      DW 2
           269 : 0003;  -- Three:    DW 3
           26A : 0004;  -- Four:     DW 4
           26B : 0005;  -- Five:     DW 5
           26C : 0006;  -- Six:      DW 6
           26D : 0007;  -- Seven:    DW 7
           26E : 0008;  -- Eight:    DW 8
           26F : 0009;  -- Nine:     DW 9
           270 : 000A;  -- Ten:      DW 10
           271 : 0001;  -- Mask0:    DW &B00000001
           272 : 0002;  -- Mask1:    DW &B00000010
           273 : 0004;  -- Mask2:    DW &B00000100
           274 : 0008;  -- Mask3:    DW &B00001000
           275 : 0010;  -- Mask4:    DW &B00010000
           276 : 0020;  -- Mask5:    DW &B00100000
           277 : 0040;  -- Mask6:    DW &B01000000
           278 : 0080;  -- Mask7:    DW &B10000000
           279 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           27A : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           27B : 03C1;  -- OneMeter:	DW 961       ; ~1m in 1.04mm units
           27C : 01E1;  -- HalfMeter:	DW 481      ; ~0.5m in 1.04mm units
           27D : 024A;  -- Ft2:		DW 586       ; ~2ft in 1.04mm units
           27E : 036F;  -- Ft3:		DW 879
           27F : 0494;  -- Ft4:		DW 1172
           280 : 005A;  -- Deg90:		DW 90        ; 90 degrees in odometer units
           281 : 00B4;  -- Deg180:		DW 180       ; 180
           282 : 010E;  -- Deg270: 	DW 270       ; 270
           283 : 0168;  -- Deg360:		DW 360       ; can never actually happen; for math only
           284 : 0064;  -- FSlow:		DW 100       ; 100 is about the lowest velocity value that will move
           285 : FF9C;  -- RSlow:    	DW -100
           286 : 015E;  -- FMid:     	DW 350       ; 350 is a medium speed
           287 : FEA2;  -- RMid:     	DW -350
           288 : 01F4;  -- FFast:    	DW 500       ; 500 is almost max speed (511 is max)
           289 : FE0C;  -- RFast:    	DW -500
           28A : 008C;  -- MinBatt:  	DW 140       ; 14.0V - minimum safe battery voltage
           28B : 1190;  -- I2CWCmd:	DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           28C : 0190;  -- I2CRCmd:  	DW &H0190    ; write nothing, read one byte, addr 0x90
           28D : 0000;  -- 	DW 0
  END;
