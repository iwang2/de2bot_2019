-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28BD;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A5E;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10DB;  -- 	STORE  DVel        ; Reset API variables
           009 : 10DA;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8241;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8223;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A6D;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A6A;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A6A;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1257;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5257;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A6B;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A5E;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           024 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           025 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           026 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           027 : B801;  -- 	LOADI	1
           028 : 9804;  -- 	OUT		SSEG1
           029 : 0A5E;  -- 	LOAD	ZERO
           02A : 6A62;  -- 	ADDI	610
           02B : 6A61;  -- 	ADDI	609
           02C : 98B0;  -- 	OUT		SONALARM
           02D : 1258;  -- 	STORE	FOUNDREFLECTOR
           02E : B820;  -- 	LOADI  32
           02F : 98B2;  -- 	OUT	   SONAREN
           030 : 0A7E;  -- 	LOAD	FMid
           031 : 10DB;  -- 	STORE  DVel
           032 : 90B0;  -- 	IN		SONALARM
           033 : 6FE0;  -- 	ADDI	-32
           034 : 4036;  -- 	JZERO	GetClose
           035 : 2832;  -- 	JUMP 	FindLoop
           036 : 90AC;  -- 	IN		DIST4
           037 : 1258;  -- 	STORE 	FOUNDREFLECTOR
           038 : 90AD;  -- 	IN 		DIST5
           039 : 2258;  -- 	SUB		FOUNDREFLECTOR
           03A : 6814;  -- 	ADDI	20
           03B : 9804;  -- 	OUT		SSEG1
           03C : 3044;  -- 	JNEG	Stop
           03D : 2838;  -- 	JUMP	GoForward
           03E : 0A58;  -- 	LOAD	FOUNDREFLECTOR
           03F : 6801;  -- 	ADDI	1
           040 : 1258;  -- 	STORE   FOUNDREFLECTOR
           041 : 6FF6;  -- 	ADDI    -10
           042 : 3844;  -- 	JPOS    Stop
           043 : 283E;  -- 	JUMP    Found
           044 : 0A5E;  -- 	LOAD   Zero
           045 : 10DB;  -- 	STORE  DVel
           046 : B802;  -- 	LOADI	2
           047 : 9804;  -- 	OUT		SSEG1
           048 : 90C2;  -- 	IN		Theta
           049 : 1259;  -- 	STORE	StartTheta
           04A : B90E;  -- 	LOADI	270
           04B : 10DA;  -- 	STORE	DTHETA
           04C : B800;  -- 	LOADI	0
           04D : 10DB;  -- 	STORE	DVEL
           04E : 90C2;  -- 	IN     	Theta
           04F : 2259;  -- 	SUB		StartTheta
           050 : 6EF2;  -- 	ADDI   	-270
           051 : 8123;  -- 	CALL  	 Abs         ; get abs(currentAngle - 90)
           052 : 6FFD;  -- 	ADDI   	-3
           053 : 384E;  -- 	JPOS   	CheckAngleCW    ; if angle error > 3, keep checking
           054 : A002;  -- 	CLI    &B0010 ; disable movement API
           055 : B803;  -- 	LOADI	3
           056 : 9804;  -- 	OUT		SSEG1
           057 : 0A6B;  -- 	LOAD	MASK2
           058 : 98B2;  -- 	OUT		SONAREN
           059 : 90AA;  -- 	IN		DIST2
           05A : 9A5B;  -- 	OUT		s2dist		; store distance from reflector to s2
           05B : B931;  -- 	LOADI	305			; 305 mm = 1 ft
           05C : 98B0;  -- 	OUT		SONALARM
           05D : 90B0;  -- 	IN		SONALARM
           05E : 226B;  -- 	SUB		MASK2
           05F : 4064;  -- 	JZERO	FinMove1
           060 : B864;  -- 	LOADI	100
           061 : 9883;  -- 	OUT		LVELCMD
           062 : 988B;  -- 	OUT		RVELCMD
           063 : 285D;  -- 	JUMP	LoopMove1
           064 : B800;  -- 	LOADI	0
           065 : 98B2;  -- 	OUT		SONAREN		; turn off sensors
           066 : 8081;  -- 	CALL	TurnLeft90
           067 : 90C2;  --     IN     THETA
           068 : 681E;  --     ADDI   30
           069 : 1259;  --     STORE  STARTTHETA
           06A : B9FF;  -- 	LOADI  511
           06B : 9883;  -- 	OUT    LVELCMD
           06C : 6F24;  -- 	ADDI   -220
           06D : 988B;  --     OUT    RVELCMD
           06E : 90C2;  --     IN     THETA
           06F : 2259;  --     SUB    STARTTHETA
           070 : 9805;  --     OUT    SSEG2
           071 : 4073;  --     JZERO  CircleEnd
           072 : 286A;  --     JUMP   CircleLoop
           073 : 2873;  --     JUMP CircleEnd
           074 : B805;  -- 	LOADI	5
           075 : 9804;  -- 	OUT		SSEG1
           076 : 0A6B;  -- 	LOAD	MASK2
           077 : 98B2;  -- 	OUT		SONAREN
           078 : 90AA;  -- 	IN		DIST2
           079 : 225B;  -- 	SUB		s2dist
           07A : 387F;  -- 	JPOS	TurnBack
           07B : BF9C;  -- 	LOADI	-100
           07C : 9883;  -- 	OUT		LVELCMD
           07D : 988B;  -- 	OUT		RVELCMD
           07E : 2878;  -- 	JUMP	CheckBackDist
           07F : 8081;  -- 	CALL 	TurnLeft90
           080 : 28B1;  -- 	JUMP	InfLoop
           081 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           082 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           083 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           084 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           085 : 98C3;  -- 	OUT		RESETPOS
           086 : B804;  -- 	LOADI	4
           087 : 9804;  -- 	OUT		SSEG1
           088 : B855;  -- 	LOADI	85
           089 : 10DA;  -- 	STORE	DTHETA
           08A : B800;  -- 	LOADI	0
           08B : 10DB;  -- 	STORE	DVEL
           08C : 90C2;  -- 	IN     Theta
           08D : 6FA6;  -- 	ADDI   -90
           08E : 8123;  -- 	CALL   Abs         ; get abs(currentAngle - 90)
           08F : 6FFD;  -- 	ADDI   -3
           090 : 388C;  -- 	JPOS   CheckAngle90    ; if angle error > 3, keep checking
           091 : 8800;  -- 	RETURN
           092 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           093 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           094 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           095 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           096 : A002;  -- 	CLI    &B0010
           097 : B820;  -- 	LOADI  32
           098 : 98B2;  -- 	OUT	   SONAREN
           099 : BA58;  -- 	LOADI  600
           09A : 6A6B;  -- 	ADDI   619
           09B : 98B0;  -- 	OUT    SONALARM
           09C : 90AD;  -- 	IN	   DIST5
           09D : 9804;  -- 	OUT    SSEG1
           09E : 90B0;  -- 	IN     SONALARM
           09F : 6FE0;  -- 	ADDI   -32
           0A0 : 40B1;  -- 	JZERO  InfLoop
           0A1 : 28A2;  -- 	JUMP   Turn
           0A2 : 90AD;  -- 	IN     DIST5
           0A3 : 9804;  -- 	OUT    SSEG1
           0A4 : B864;  -- 	LOADI  100
           0A5 : 9883;  -- 	OUT    LVELCMD
           0A6 : 6F38;  -- 	ADDI   -200
           0A7 : 988B;  -- 	OUT    RVELCMD
           0A8 : 289C;  -- 	JUMP   Check
           0A9 : 90C2;  -- 	IN     Theta
           0AA : 6FA6;  -- 	ADDI   -90
           0AB : 8123;  -- 	CALL   Abs         ; get abs(currentAngle - 90)
           0AC : 6FFD;  -- 	ADDI   -3
           0AD : 38A9;  -- 	JPOS   TurnLoop    ; if angle error > 3, keep checking
           0AE : 0A5F;  -- 	LOAD   One
           0AF : 10DB;  -- 	STORE  DVel        ; use API to move forward
           0B0 : 289C;  -- 	JUMP   Check
           0B1 : 90AD;  -- 	IN     DIST5
           0B2 : 9804;  -- 	OUT    SSEG1
           0B3 : 28B1;  -- 	JUMP   InfLoop
           0B4 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0B5 : 0A5E;  -- 	LOAD   Zero        ; Stop everything.
           0B6 : 9883;  -- 	OUT    LVELCMD
           0B7 : 988B;  -- 	OUT    RVELCMD
           0B8 : 98B2;  -- 	OUT    SONAREN
           0B9 : 08BC;  -- 	LOAD   DEAD        ; An indication that we are dead
           0BA : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0BB : 28BB;  -- 	JUMP   Forever     ; Do this forever.
           0BC : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0BD : 80DC;  -- 	CALL   ControlMovement
           0BE : B000;  -- 	RETI   ; return from ISR
           0BF : 90C0;  -- 	IN		XPOS
           0C0 : 9804;  -- 	OUT		SSEG1
           0C1 : 6D9E;  -- 	ADDI   	-610
           0C2 : 6D9E;  -- 	ADDI   	-610
           0C3 : 6D9E;  -- 	ADDI   	-610
           0C4 : 6D9E;  -- 	ADDI   	-610
           0C5 : 6D9E;  -- 	ADDI   	-610
           0C6 : 6D9E;  -- 	ADDI   	-610
           0C7 : 38C9;  -- 	JPOS   	ReachedEnd
           0C8 : 8800;  -- 	RETURN
           0C9 : 6D9E;  -- 	ADDI   	-610
           0CA : 6D9E;  -- 	ADDI   	-610
           0CB : 6D9E;  -- 	ADDI   	-610
           0CC : 6D9E;  -- 	ADDI   	-610
           0CD : 6D9E;  -- 	ADDI   	-610
           0CE : 6D9E;  -- 	ADDI   	-610
           0CF : 6D9E;  -- 	ADDI   	-610
           0D0 : 6D9E;  -- 	ADDI   	-610
           0D1 : 38D4;  -- 	JPOS   	ReachedStart
           0D2 : 80D7;  -- 	CALL   	TurnAtEnd
           0D3 : 8800;  -- 	RETURN
           0D4 : 80D7;  -- 	CALL	TurnAtEnd
           0D5 : 98C3;  -- 	OUT		RESETPOS
           0D6 : 8800;  -- 	RETURN
           0D7 : B8B4;  -- 	LOADI  	180
           0D8 : 10DA;  -- 	STORE	DTheta
           0D9 : 8800;  -- 	RETURN
           0DA : 0000;  -- DTheta:    DW 0
           0DB : 0000;  -- DVel:      DW 0
           0DC : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0DD : 111C;  -- 	STORE  MaxVal
           0DE : 8109;  -- 	CALL   GetThetaErr ; get the heading error
           0DF : 6002;  -- 	SHIFT  2
           0E0 : 1106;  -- 	STORE  CMAErr      ; hold temporarily
           0E1 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0E2 : 8110;  -- 	CALL   CapValue    ; get a +/- max of 50
           0E3 : 1906;  -- 	ADD    CMAErr
           0E4 : 1106;  -- 	STORE  CMAErr      ; now contains a desired differential
           0E5 : B9FE;  -- 	LOADI  510
           0E6 : 111C;  -- 	STORE  MaxVal
           0E7 : 08DB;  -- 	LOAD   DVel
           0E8 : 8110;  -- 	CALL   CapValue    ; ensure velocity is valid
           0E9 : 10DB;  -- 	STORE  DVel        ; overwrite any invalid input
           0EA : 1906;  -- 	ADD    CMAErr
           0EB : 8110;  -- 	CALL   CapValue    ; ensure velocity is valid
           0EC : 1108;  -- 	STORE  CMAR
           0ED : 0906;  -- 	LOAD   CMAErr
           0EE : 8124;  -- 	CALL   Neg         ; left wheel gets negative differential
           0EF : 18DB;  -- 	ADD    DVel
           0F0 : 8110;  -- 	CALL   CapValue
           0F1 : 1107;  -- 	STORE  CMAL
           0F2 : 0906;  -- 	LOAD   CMAErr
           0F3 : 6001;  -- 	SHIFT  1           ; double the differential
           0F4 : 1106;  -- 	STORE  CMAErr
           0F5 : 0908;  -- 	LOAD   CMAR
           0F6 : 2107;  -- 	SUB    CMAL        ; calculate the actual differential
           0F7 : 2106;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0F8 : 4101;  -- 	JZERO  CMADone
           0F9 : 1106;  -- 	STORE  CMAErr      ; the missing part
           0FA : 1907;  -- 	ADD    CMAL
           0FB : 8110;  -- 	CALL   CapValue
           0FC : 1107;  -- 	STORE  CMAL
           0FD : 0908;  -- 	LOAD   CMAR
           0FE : 2106;  -- 	SUB    CMAErr
           0FF : 8110;  -- 	CALL   CapValue
           100 : 1108;  -- 	STORE  CMAR
           101 : 0907;  -- 	LOAD   CMAL
           102 : 9883;  -- 	OUT    LVELCMD
           103 : 0908;  -- 	LOAD   CMAR
           104 : 988B;  -- 	OUT    RVELCMD
           105 : 8800;  -- 	RETURN
           106 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           107 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           108 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           109 : 90C2;  -- 	IN     THETA
           10A : 20DA;  -- 	SUB    DTheta      ; actual - desired angle
           10B : 8124;  -- 	CALL   Neg         ; desired - actual angle
           10C : 68B4;  -- 	ADDI   180
           10D : 811D;  -- 	CALL   Mod360
           10E : 6F4C;  -- 	ADDI   -180
           10F : 8800;  -- 	RETURN
           110 : 211C;  -- 	SUB     MaxVal
           111 : 3917;  -- 	JPOS    CapVelHigh
           112 : 191C;  -- 	ADD     MaxVal
           113 : 191C;  -- 	ADD     MaxVal
           114 : 3119;  -- 	JNEG    CapVelLow
           115 : 211C;  -- 	SUB     MaxVal
           116 : 8800;  -- 	RETURN
           117 : 091C;  -- 	LOAD    MaxVal
           118 : 8800;  -- 	RETURN
           119 : 091C;  -- 	LOAD    MaxVal
           11A : 8124;  -- 	CALL    Neg
           11B : 8800;  -- 	RETURN
           11C : 01FE;  -- 	MaxVal: DW 510
           11D : 3120;  -- 	JNEG   M360N
           11E : 6E98;  -- 	ADDI   -360
           11F : 291D;  -- 	JUMP   Mod360
           120 : 6968;  -- 	ADDI   360
           121 : 3120;  -- 	JNEG   M360N
           122 : 8800;  -- 	RETURN
           123 : 3926;  -- 	JPOS   Abs_r
           124 : 5A5D;  -- 	XOR    NegOne       ; Flip all bits
           125 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           126 : 8800;  -- 	RETURN
           127 : 0987;  -- 	LOAD   AtanY
           128 : 8123;  -- 	CALL   Abs          ; abs(y)
           129 : 1189;  -- 	STORE  AtanT
           12A : 0986;  -- 	LOAD   AtanX        ; abs(x)
           12B : 8123;  -- 	CALL   Abs
           12C : 2189;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           12D : 3138;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           12E : 0986;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           12F : 3135;  -- 	JNEG   A2_R3
           130 : 8147;  -- 	CALL   A2_calc      ; Octants 1, 8
           131 : 3133;  -- 	JNEG   A2_R1n
           132 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           133 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           134 : 8800;  -- 	RETURN
           135 : 8147;  -- 	CALL   A2_calc      ; Octants 4, 5            
           136 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           137 : 8800;  -- 	RETURN
           138 : 0987;  -- 	LOAD   AtanY        ; Swap input arguments
           139 : 1189;  -- 	STORE  AtanT
           13A : 0986;  -- 	LOAD   AtanX
           13B : 1187;  -- 	STORE  AtanY
           13C : 0989;  -- 	LOAD   AtanT
           13D : 1186;  -- 	STORE  AtanX
           13E : 3943;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           13F : 8147;  -- 	CALL   A2_calc      ; else octants 6, 7
           140 : 8124;  -- 	CALL   Neg          ; Negatge the number
           141 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           142 : 8800;  -- 	RETURN
           143 : 8147;  -- 	CALL   A2_calc      ; Octants 2, 3
           144 : 8124;  -- 	CALL   Neg          ; negate the angle
           145 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           146 : 8800;  -- 	RETURN
           147 : 0987;  -- 	LOAD   AtanY
           148 : 11E6;  -- 	STORE  d16sN        ; Y in numerator
           149 : 0986;  -- 	LOAD   AtanX
           14A : 11E7;  -- 	STORE  d16sD        ; X in denominator
           14B : 8173;  -- 	CALL   A2_div       ; divide
           14C : 09EC;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           14D : 1188;  -- 	STORE  AtanRatio
           14E : 11AF;  -- 	STORE  m16sA
           14F : 11B0;  -- 	STORE  m16sB
           150 : 816A;  -- 	CALL   A2_mult      ; X^2
           151 : 11AF;  -- 	STORE  m16sA
           152 : 098A;  -- 	LOAD   A2c
           153 : 11B0;  -- 	STORE  m16sB
           154 : 816A;  -- 	CALL   A2_mult
           155 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           156 : 11E7;  -- 	STORE  d16sD
           157 : 0988;  -- 	LOAD   AtanRatio
           158 : 11E6;  -- 	STORE  d16sN        ; Ratio in numerator
           159 : 8173;  -- 	CALL   A2_div       ; divide
           15A : 09EC;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           15B : 11AF;  -- 	STORE  m16sA        ; <= result in radians
           15C : 098B;  -- 	LOAD   A2cd         ; degree conversion factor
           15D : 11B0;  -- 	STORE  m16sB
           15E : 816A;  -- 	CALL   A2_mult      ; convert to degrees
           15F : 1189;  -- 	STORE  AtanT
           160 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           161 : 4A5F;  -- 	AND    One
           162 : 4167;  -- 	JZERO  A2_rdwn      ; round down
           163 : 0989;  -- 	LOAD   AtanT
           164 : 6018;  -- 	SHIFT  -8
           165 : 6801;  -- 	ADDI   1            ; round up
           166 : 8800;  -- 	RETURN
           167 : 0989;  -- 	LOAD   AtanT
           168 : 6018;  -- 	SHIFT  -8           ; round down
           169 : 8800;  -- 	RETURN
           16A : 818C;  -- 	CALL   Mult16s
           16B : 09B4;  -- 	LOAD   mres16sH
           16C : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           16D : 11B4;  -- 	STORE  mres16sH
           16E : 09B3;  -- 	LOAD   mres16sL
           16F : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           170 : 4A71;  -- 	AND    LowByte
           171 : 51B4;  -- 	OR     mres16sH     ; combine high and low words of result
           172 : 8800;  -- 	RETURN
           173 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           174 : 1189;  -- 	STORE  AtanT
           175 : 0989;  -- 	LOAD   AtanT
           176 : 6FFF;  -- 	ADDI   -1
           177 : 397A;  -- 	JPOS   A2_DN        ; not done; continue shifting
           178 : 81B5;  -- 	CALL   Div16s       ; do the standard division
           179 : 8800;  -- 	RETURN
           17A : 1189;  -- 	STORE  AtanT
           17B : 09E6;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           17C : 6001;  -- 	SHIFT  1
           17D : 59E6;  -- 	XOR    d16sN        ; if the sign changed,
           17E : 3182;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           17F : 59E6;  -- 	XOR    d16sN        ; get back shifted version
           180 : 11E6;  -- 	STORE  d16sN
           181 : 2975;  -- 	JUMP   A2_DL
           182 : 09E7;  -- 	LOAD   d16sD
           183 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           184 : 11E7;  -- 	STORE  d16sD
           185 : 2975;  -- 	JUMP   A2_DL
           186 : 0000;  -- AtanX:      DW 0
           187 : 0000;  -- AtanY:      DW 0
           188 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           189 : 0000;  -- AtanT:      DW 0        ; temporary value
           18A : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           18B : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           18C : B800;  -- 	LOADI  0
           18D : 11B1;  -- 	STORE  m16sc        ; clear carry
           18E : 11B4;  -- 	STORE  mres16sH     ; clear result
           18F : B810;  -- 	LOADI  16           ; load 16 to counter
           190 : 11B2;  -- 	STORE  mcnt16s      
           191 : 09B1;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           192 : 4196;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           193 : 09B4;  -- 	LOAD   mres16sH     ; if a carry, 
           194 : 19AF;  -- 	ADD    m16sA        ;  add multiplicand to result H
           195 : 11B4;  -- 	STORE  mres16sH
           196 : 09B0;  -- 	LOAD   m16sB
           197 : 4A5F;  -- 	AND    One          ; check bit 0 of multiplier
           198 : 11B1;  -- 	STORE  m16sc        ; save as next carry
           199 : 419D;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           19A : 09B4;  -- 	LOAD   mres16sH     ; if bit 0 set,
           19B : 21AF;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           19C : 11B4;  -- 	STORE  mres16sH
           19D : 09B0;  -- 	LOAD   m16sB
           19E : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           19F : 49AE;  -- 	AND    c7FFF        ; clear msb
           1A0 : 11B0;  -- 	STORE  m16sB
           1A1 : 09B4;  -- 	LOAD   mres16sH     ; load result H
           1A2 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1A3 : 51B0;  -- 	OR     m16sB
           1A4 : 11B0;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1A5 : 09B4;  -- 	LOAD   mres16sH
           1A6 : 6011;  -- 	SHIFT  -1
           1A7 : 11B4;  -- 	STORE  mres16sH     ; shift result H >>1
           1A8 : 09B2;  -- 	LOAD   mcnt16s
           1A9 : 6FFF;  -- 	ADDI   -1           ; check counter
           1AA : 3990;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1AB : 09B0;  -- 	LOAD   m16sB
           1AC : 11B3;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1AD : 8800;  -- 	RETURN              ; Done
           1AE : 7FFF;  -- c7FFF: DW &H7FFF
           1AF : 0000;  -- m16sA: DW 0 ; multiplicand
           1B0 : 0000;  -- m16sB: DW 0 ; multipler
           1B1 : 0000;  -- m16sc: DW 0 ; carry
           1B2 : 0000;  -- mcnt16s: DW 0 ; counter
           1B3 : 0000;  -- mres16sL: DW 0 ; result low
           1B4 : 0000;  -- mres16sH: DW 0 ; result high
           1B5 : B800;  -- 	LOADI  0
           1B6 : 11ED;  -- 	STORE  dres16sR     ; clear remainder result
           1B7 : 11EA;  -- 	STORE  d16sC1       ; clear carry
           1B8 : 09E6;  -- 	LOAD   d16sN
           1B9 : 59E7;  -- 	XOR    d16sD
           1BA : 11E8;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1BB : B811;  -- 	LOADI  17
           1BC : 11E9;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1BD : 09E7;  -- 	LOAD   d16sD
           1BE : 8123;  -- 	CALL   Abs          ; take absolute value of denominator
           1BF : 11E7;  -- 	STORE  d16sD
           1C0 : 09E6;  -- 	LOAD   d16sN
           1C1 : 8123;  -- 	CALL   Abs          ; take absolute value of numerator
           1C2 : 11E6;  -- 	STORE  d16sN
           1C3 : 09E6;  -- 	LOAD   d16sN
           1C4 : 601F;  -- 	SHIFT  -15          ; get msb
           1C5 : 4A5F;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1C6 : 11EB;  -- 	STORE  d16sC2       ; store as carry
           1C7 : 09E6;  -- 	LOAD   d16sN
           1C8 : 6001;  -- 	SHIFT  1            ; shift <<1
           1C9 : 51EA;  -- 	OR     d16sC1       ; with carry
           1CA : 11E6;  -- 	STORE  d16sN
           1CB : 09E9;  -- 	LOAD   d16sT
           1CC : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1CD : 41DD;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1CE : 11E9;  -- 	STORE  d16sT
           1CF : 09ED;  -- 	LOAD   dres16sR
           1D0 : 6001;  -- 	SHIFT  1            ; shift remainder
           1D1 : 51EB;  -- 	OR     d16sC2       ; with carry from other shift
           1D2 : 21E7;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1D3 : 31D8;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1D4 : 11ED;  -- 	STORE  dres16sR
           1D5 : B801;  -- 	LOADI  1
           1D6 : 11EA;  -- 	STORE  d16sC1       ; set carry
           1D7 : 29C3;  -- 	JUMP   Div16s_loop
           1D8 : 19E7;  -- 	ADD    d16sD        ; add denominator back in
           1D9 : 11ED;  -- 	STORE  dres16sR
           1DA : B800;  -- 	LOADI  0
           1DB : 11EA;  -- 	STORE  d16sC1       ; clear carry
           1DC : 29C3;  -- 	JUMP   Div16s_loop
           1DD : 09E6;  -- 	LOAD   d16sN
           1DE : 11EC;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1DF : 09E8;  -- 	LOAD   d16sS        ; check the sign indicator
           1E0 : 31E2;  -- 	JNEG   Div16s_neg
           1E1 : 8800;  -- 	RETURN
           1E2 : 09EC;  -- 	LOAD   dres16sQ     ; need to negate the result
           1E3 : 8124;  -- 	CALL   Neg
           1E4 : 11EC;  -- 	STORE  dres16sQ
           1E5 : 8800;  -- 	RETURN	
           1E6 : 0000;  -- d16sN: DW 0 ; numerator
           1E7 : 0000;  -- d16sD: DW 0 ; denominator
           1E8 : 0000;  -- d16sS: DW 0 ; sign value
           1E9 : 0000;  -- d16sT: DW 0 ; temp counter
           1EA : 0000;  -- d16sC1: DW 0 ; carry value
           1EB : 0000;  -- d16sC2: DW 0 ; carry value
           1EC : 0000;  -- dres16sQ: DW 0 ; quotient result
           1ED : 0000;  -- dres16sR: DW 0 ; remainder result
           1EE : 0A18;  -- 	LOAD   L2X
           1EF : 8123;  -- 	CALL   Abs
           1F0 : 121A;  -- 	STORE  L2T1
           1F1 : 0A19;  -- 	LOAD   L2Y
           1F2 : 8123;  -- 	CALL   Abs
           1F3 : 221A;  -- 	SUB    L2T1
           1F4 : 3210;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1F5 : 1A1A;  -- 	ADD    L2T1
           1F6 : 11AF;  -- 	STORE  m16sa
           1F7 : B8F6;  -- 	LOADI  246       ; max * 246
           1F8 : 11B0;  -- 	STORE  m16sB
           1F9 : 818C;  -- 	CALL   Mult16s
           1FA : 09B4;  -- 	LOAD   mres16sH
           1FB : 6008;  -- 	SHIFT  8
           1FC : 121B;  -- 	STORE  L2T2
           1FD : 09B3;  -- 	LOAD   mres16sL
           1FE : 6018;  -- 	SHIFT  -8        ; / 256
           1FF : 4A71;  -- 	AND    LowByte
           200 : 521B;  -- 	OR     L2T2
           201 : 121C;  -- 	STORE  L2T3
           202 : 0A1A;  -- 	LOAD   L2T1
           203 : 11AF;  -- 	STORE  m16sa
           204 : B868;  -- 	LOADI  104       ; min * 104
           205 : 11B0;  -- 	STORE  m16sB
           206 : 818C;  -- 	CALL   Mult16s
           207 : 09B4;  -- 	LOAD   mres16sH
           208 : 6008;  -- 	SHIFT  8
           209 : 121B;  -- 	STORE  L2T2
           20A : 09B3;  -- 	LOAD   mres16sL
           20B : 6018;  -- 	SHIFT  -8        ; / 256
           20C : 4A71;  -- 	AND    LowByte
           20D : 521B;  -- 	OR     L2T2
           20E : 1A1C;  -- 	ADD    L2T3     ; sum
           20F : 8800;  -- 	RETURN
           210 : 1A1A;  -- 	ADD    L2T1
           211 : 121B;  -- 	STORE  L2T2
           212 : 0A1A;  -- 	LOAD   L2T1
           213 : 121C;  -- 	STORE  L2T3
           214 : 0A1B;  -- 	LOAD   L2T2
           215 : 121A;  -- 	STORE  L2T1
           216 : 0A1C;  -- 	LOAD   L2T3
           217 : 29F6;  -- 	JUMP   CalcDist
           218 : 0000;  -- L2X:  DW 0
           219 : 0000;  -- L2Y:  DW 0
           21A : 0000;  -- L2T1: DW 0
           21B : 0000;  -- L2T2: DW 0
           21C : 0000;  -- L2T3: DW 0
           21D : 9802;  -- 	OUT    TIMER
           21E : 9002;  -- 	IN     TIMER
           21F : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           220 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           221 : 321E;  -- 	JNEG   Wloop
           222 : 8800;  -- 	RETURN
           223 : 823B;  -- 	CALL   GetBattLvl
           224 : 4223;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           225 : 2282;  -- 	SUB    MinBatt
           226 : 3229;  -- 	JNEG   DeadBatt
           227 : 1A82;  -- 	ADD    MinBatt     ; get original value back
           228 : 8800;  -- 	RETURN
           229 : B820;  -- 	LOADI  &H20
           22A : 980A;  -- 	OUT    BEEP        ; start beep sound
           22B : 823B;  -- 	CALL   GetBattLvl  ; get the battery level
           22C : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           22D : 9805;  -- 	OUT    SSEG2
           22E : 9806;  -- 	OUT    LCD
           22F : 0A5E;  -- 	LOAD   Zero
           230 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           231 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           232 : 9807;  -- 	OUT    XLEDS
           233 : 821D;  -- 	CALL   Wait1       ; 1 second
           234 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           235 : 980A;  -- 	OUT    BEEP        ; stop beeping
           236 : 0A5E;  -- 	LOAD   Zero
           237 : 9801;  -- 	OUT    LEDS        ; LEDs off
           238 : 9807;  -- 	OUT    XLEDS
           239 : 821D;  -- 	CALL   Wait1       ; 1 second
           23A : 2A29;  -- 	JUMP   DeadBatt    ; repeat forever
           23B : 0A84;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           23C : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           23D : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           23E : 8249;  -- 	CALL   BlockI2C    ; wait for it to finish
           23F : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           240 : 8800;  -- 	RETURN
           241 : 8249;  -- 	CALL   BlockI2C    ; wait for idle
           242 : 0A83;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           243 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           244 : 0A5E;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           245 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           246 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           247 : 8249;  -- 	CALL   BlockI2C    ; wait for it to finish
           248 : 8800;  -- 	RETURN
           249 : 0A5E;  -- 	LOAD   Zero
           24A : 1257;  -- 	STORE  Temp        ; Used to check for timeout
           24B : 0A57;  -- 	LOAD   Temp
           24C : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           24D : 1257;  -- 	STORE  Temp
           24E : 4252;  -- 	JZERO  I2CError    ; Timeout occurred; error
           24F : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           250 : 3A4B;  -- 	JPOS   BI2CL       ; If not 0, try again
           251 : 8800;  -- 	RETURN             ; Else return
           252 : 0A5E;  -- 	LOAD   Zero
           253 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           254 : 9804;  -- 	OUT    SSEG1
           255 : 9805;  -- 	OUT    SSEG2       ; display error message
           256 : 2A52;  -- 	JUMP   I2CError
           257 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           258 : 0000;  -- FOUNDREFLECTOR:	DW 0
           259 : 0000;  -- StartTheta:		DW 0
           25A : 0000;  -- linedist:	DW 0
           25B : 0000;  -- s2dist:		DW 0
           25C : 0000;  -- s3dist:		DW 0
           25D : FFFF;  -- NegOne:   DW -1
           25E : 0000;  -- Zero:     DW 0
           25F : 0001;  -- One:      DW 1
           260 : 0002;  -- Two:      DW 2
           261 : 0003;  -- Three:    DW 3
           262 : 0004;  -- Four:     DW 4
           263 : 0005;  -- Five:     DW 5
           264 : 0006;  -- Six:      DW 6
           265 : 0007;  -- Seven:    DW 7
           266 : 0008;  -- Eight:    DW 8
           267 : 0009;  -- Nine:     DW 9
           268 : 000A;  -- Ten:      DW 10
           269 : 0001;  -- Mask0:    DW &B00000001
           26A : 0002;  -- Mask1:    DW &B00000010
           26B : 0004;  -- Mask2:    DW &B00000100
           26C : 0008;  -- Mask3:    DW &B00001000
           26D : 0010;  -- Mask4:    DW &B00010000
           26E : 0020;  -- Mask5:    DW &B00100000
           26F : 0040;  -- Mask6:    DW &B01000000
           270 : 0080;  -- Mask7:    DW &B10000000
           271 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           272 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           273 : 03C1;  -- OneMeter:	DW 961       ; ~1m in 1.04mm units
           274 : 01E1;  -- HalfMeter:	DW 481      ; ~0.5m in 1.04mm units
           275 : 024A;  -- Ft2:		DW 586       ; ~2ft in 1.04mm units
           276 : 036F;  -- Ft3:		DW 879
           277 : 0494;  -- Ft4:		DW 1172
           278 : 005A;  -- Deg90:		DW 90        ; 90 degrees in odometer units
           279 : 00B4;  -- Deg180:		DW 180       ; 180
           27A : 010E;  -- Deg270: 	DW 270       ; 270
           27B : 0168;  -- Deg360:		DW 360       ; can never actually happen; for math only
           27C : 0064;  -- FSlow:		DW 100       ; 100 is about the lowest velocity value that will move
           27D : FF9C;  -- RSlow:    	DW -100
           27E : 015E;  -- FMid:     	DW 350       ; 350 is a medium speed
           27F : FEA2;  -- RMid:     	DW -350
           280 : 01F4;  -- FFast:    	DW 500       ; 500 is almost max speed (511 is max)
           281 : FE0C;  -- RFast:    	DW -500
           282 : 008C;  -- MinBatt:  	DW 140       ; 14.0V - minimum safe battery voltage
           283 : 1190;  -- I2CWCmd:	DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           284 : 0190;  -- I2CRCmd:  	DW &H0190    ; write nothing, read one byte, addr 0x90
           285 : 0000;  -- 	DW 0
  END;
